'use client'

import { Card, CardBody, CardHeader } from '@nextui-org/card'
import { Chip } from '@nextui-org/chip'
import { Evidence } from '@/actions'
import { useState } from 'react'
import { Button } from '@nextui-org/button'

interface EvidenceSectionProps {
  evidence: Evidence[]
  confidence?: number
  reasoning?: string
}

const DOMAIN_LABELS: Record<string, { name: string; color: 'primary' | 'success' | 'warning' | 'danger' | 'secondary' }> = {
  O: { name: 'Openness', color: 'primary' },
  C: { name: 'Conscientiousness', color: 'success' },
  E: { name: 'Extraversion', color: 'warning' },
  A: { name: 'Agreeableness', color: 'secondary' },
  N: { name: 'Neuroticism', color: 'danger' }
}

export function EvidenceSection({ evidence, confidence, reasoning }: EvidenceSectionProps) {
  const [selectedDomain, setSelectedDomain] = useState<string | null>(null)

  if (!evidence || evidence.length === 0) {
    return null
  }

  const filteredEvidence = selectedDomain
    ? evidence.filter(e => e.domain === selectedDomain)
    : evidence

  const sortedEvidence = [...filteredEvidence].sort((a, b) => b.confidence - a.confidence)

  const domains = Array.from(new Set(evidence.map(e => e.domain)))

  return (
    <div className="mt-8 space-y-4">
      <div className="border-t pt-8">
        <h2 className="text-2xl font-bold mb-2">Interview Analysis Evidence</h2>
        <p className="text-gray-600 dark:text-gray-400 mb-4">
          AI-powered analysis of personality traits based on interview transcript
        </p>

        {confidence && (
          <div className="mb-4">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-sm font-medium">Overall Confidence:</span>
              <Chip
                color={confidence > 0.8 ? 'success' : confidence > 0.6 ? 'warning' : 'default'}
                variant="flat"
              >
                {(confidence * 100).toFixed(0)}%
              </Chip>
            </div>
            {reasoning && (
              <p className="text-sm text-gray-600 dark:text-gray-400 italic">
                {reasoning}
              </p>
            )}
          </div>
        )}

        <div className="flex gap-2 mb-4 flex-wrap">
          <Button
            size="sm"
            variant={selectedDomain === null ? 'solid' : 'bordered'}
            color="default"
            onPress={() => setSelectedDomain(null)}
          >
            All ({evidence.length})
          </Button>
          {domains.map(domain => {
            const count = evidence.filter(e => e.domain === domain).length
            const domainInfo = DOMAIN_LABELS[domain]
            return (
              <Button
                key={domain}
                size="sm"
                variant={selectedDomain === domain ? 'solid' : 'bordered'}
                color={domainInfo.color}
                onPress={() => setSelectedDomain(domain)}
              >
                {domainInfo.name} ({count})
              </Button>
            )
          })}
        </div>

        <div className="space-y-3">
          {sortedEvidence.map((ev, index) => {
            const domainInfo = DOMAIN_LABELS[ev.domain]
            return (
              <Card key={index} shadow="sm">
                <CardHeader className="pb-2">
                  <div className="flex items-center gap-2 flex-wrap">
                    <Chip size="sm" color={domainInfo.color} variant="flat">
                      {domainInfo.name}
                    </Chip>
                    <Chip size="sm" variant="flat">
                      {ev.facetName}
                    </Chip>
                    <Chip
                      size="sm"
                      color={ev.confidence > 0.8 ? 'success' : ev.confidence > 0.6 ? 'warning' : 'default'}
                      variant="dot"
                    >
                      {(ev.confidence * 100).toFixed(0)}% confidence
                    </Chip>
                  </div>
                </CardHeader>
                <CardBody className="pt-0">
                  <blockquote className="border-l-4 border-gray-300 dark:border-gray-700 pl-4 py-2 italic text-gray-700 dark:text-gray-300 mb-2">
                    "{ev.quote}"
                  </blockquote>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    <strong>Analysis:</strong> {ev.reasoning}
                  </p>
                </CardBody>
              </Card>
            )
          })}
        </div>

        <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
          <p className="text-xs text-gray-600 dark:text-gray-400">
            <strong>Note:</strong> This analysis is generated by AI (GPT-4) based on the interview transcript.
            Evidence quotes and reasoning are provided to ensure transparency and explainability.
            Higher confidence scores indicate stronger behavioral indicators in the transcript.
          </p>
        </div>
      </div>
    </div>
  )
}
